
atmega368p_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000900  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c29  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	47 d0       	rcall	.+142    	; 0x104 <main>
  76:	cf c1       	rjmp	.+926    	; 0x416 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <USART_init>:
#ifndef USART_COMMS_C_
#define USART_COMMS_C_

#include <USART_comms.h>

void USART_init(uint8_t ubrr) {
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	1f 92       	push	r1
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	89 83       	std	Y+1, r24	; 0x01

	/* Set baud rate */
	UBRR0H = ubrr >> 8;
  86:	85 ec       	ldi	r24, 0xC5	; 197
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	29 81       	ldd	r18, Y+1	; 0x01
  8c:	22 2f       	mov	r18, r18
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	23 2f       	mov	r18, r19
  92:	33 0f       	add	r19, r19
  94:	33 0b       	sbc	r19, r19
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	UBRR0L = ubrr;
  9a:	84 ec       	ldi	r24, 0xC4	; 196
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	29 81       	ldd	r18, Y+1	; 0x01
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18

	/* Enable receiver and transmitter */
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  a4:	81 ec       	ldi	r24, 0xC1	; 193
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	21 ec       	ldi	r18, 0xC1	; 193
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	20 81       	ld	r18, Z
  b0:	28 61       	ori	r18, 0x18	; 24
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18

	/* Set frame format: 8data, 2stop bit */
	UCSR0C |= (1<<USBS0)|(3<<UCSZ00);
  b6:	82 ec       	ldi	r24, 0xC2	; 194
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	22 ec       	ldi	r18, 0xC2	; 194
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	20 81       	ld	r18, Z
  c2:	2e 60       	ori	r18, 0x0E	; 14
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
}
  c8:	0f 90       	pop	r0
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <USART_transmit>:

void USART_transmit(uint8_t data) {
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	1f 92       	push	r1
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  dc:	00 00       	nop
  de:	80 ec       	ldi	r24, 0xC0	; 192
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	80 81       	ld	r24, Z
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	80 72       	andi	r24, 0x20	; 32
  ec:	99 27       	eor	r25, r25
  ee:	89 2b       	or	r24, r25
  f0:	b1 f3       	breq	.-20     	; 0xde <USART_transmit+0xe>

	/* Put data into buffer, sends the data */
	UDR0 = data;
  f2:	86 ec       	ldi	r24, 0xC6	; 198
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	29 81       	ldd	r18, Y+1	; 0x01
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
}
  fc:	0f 90       	pop	r0
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:
 */

#include <USART_comms.h>
#include <util/delay.h>

int main(void) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	2f 97       	sbiw	r28, 0x0f	; 15
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	USART_init(UBRR);
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	af df       	rcall	.-162    	; 0x7a <USART_init>
 11c:	8c e0       	ldi	r24, 0x0C	; 12

	uint8_t data = 0x0C;
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	89 81       	ldd	r24, Y+1	; 0x01
	while (1) {
		USART_transmit(data);
 122:	d6 df       	rcall	.-84     	; 0xd0 <USART_transmit>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e4       	ldi	r25, 0x40	; 64
 128:	ac e9       	ldi	r26, 0x9C	; 156
 12a:	b5 e4       	ldi	r27, 0x45	; 69
 12c:	8a 83       	std	Y+2, r24	; 0x02
 12e:	9b 83       	std	Y+3, r25	; 0x03
 130:	ac 83       	std	Y+4, r26	; 0x04
 132:	bd 83       	std	Y+5, r27	; 0x05
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 138:	4a e7       	ldi	r20, 0x7A	; 122
 13a:	53 e4       	ldi	r21, 0x43	; 67
 13c:	6a 81       	ldd	r22, Y+2	; 0x02
 13e:	7b 81       	ldd	r23, Y+3	; 0x03
 140:	8c 81       	ldd	r24, Y+4	; 0x04
 142:	9d 81       	ldd	r25, Y+5	; 0x05
 144:	dd d0       	rcall	.+442    	; 0x300 <__mulsf3>
 146:	dc 01       	movw	r26, r24
 148:	cb 01       	movw	r24, r22
 14a:	8e 83       	std	Y+6, r24	; 0x06
 14c:	9f 83       	std	Y+7, r25	; 0x07
 14e:	a8 87       	std	Y+8, r26	; 0x08
 150:	b9 87       	std	Y+9, r27	; 0x09
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
 158:	5f e3       	ldi	r21, 0x3F	; 63
 15a:	6e 81       	ldd	r22, Y+6	; 0x06
 15c:	7f 81       	ldd	r23, Y+7	; 0x07
 15e:	88 85       	ldd	r24, Y+8	; 0x08
 160:	99 85       	ldd	r25, Y+9	; 0x09
 162:	4d d0       	rcall	.+154    	; 0x1fe <__cmpsf2>
 164:	88 23       	and	r24, r24
 166:	2c f4       	brge	.+10     	; 0x172 <main+0x6e>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9b 87       	std	Y+11, r25	; 0x0b
 16e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
 170:	3b c0       	rjmp	.+118    	; 0x1e8 <main+0xe4>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	3f ef       	ldi	r19, 0xFF	; 255
 176:	4f e7       	ldi	r20, 0x7F	; 127
 178:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
 17a:	6e 81       	ldd	r22, Y+6	; 0x06
 17c:	7f 81       	ldd	r23, Y+7	; 0x07
 17e:	88 85       	ldd	r24, Y+8	; 0x08
 180:	99 85       	ldd	r25, Y+9	; 0x09
 182:	ba d0       	rcall	.+372    	; 0x2f8 <__gesf2>
 184:	18 16       	cp	r1, r24
 186:	3c f5       	brge	.+78     	; 0x1d6 <main+0xd2>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e2       	ldi	r20, 0x20	; 32
 18e:	51 e4       	ldi	r21, 0x41	; 65
 190:	6a 81       	ldd	r22, Y+2	; 0x02
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 192:	7b 81       	ldd	r23, Y+3	; 0x03
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	b3 d0       	rcall	.+358    	; 0x300 <__mulsf3>
 19a:	dc 01       	movw	r26, r24
 19c:	cb 01       	movw	r24, r22
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	31 d0       	rcall	.+98     	; 0x206 <__fixunssfsi>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	9b 87       	std	Y+11, r25	; 0x0b
 1aa:	8a 87       	std	Y+10, r24	; 0x0a
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <main+0xc8>
 1ae:	89 e1       	ldi	r24, 0x19	; 25
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9d 87       	std	Y+13, r25	; 0x0d
 1b4:	8c 87       	std	Y+12, r24	; 0x0c
 1b6:	8c 85       	ldd	r24, Y+12	; 0x0c
 1b8:	9d 85       	ldd	r25, Y+13	; 0x0d
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0xb6>
 1be:	9d 87       	std	Y+13, r25	; 0x0d
 1c0:	8c 87       	std	Y+12, r24	; 0x0c
 1c2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1c4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	9b 87       	std	Y+11, r25	; 0x0b
 1ca:	8a 87       	std	Y+10, r24	; 0x0a
 1cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 1ce:	9b 85       	ldd	r25, Y+11	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	89 2b       	or	r24, r25
 1d2:	69 f7       	brne	.-38     	; 0x1ae <main+0xaa>
 1d4:	13 c0       	rjmp	.+38     	; 0x1fc <main+0xf8>
 1d6:	6e 81       	ldd	r22, Y+6	; 0x06
 1d8:	7f 81       	ldd	r23, Y+7	; 0x07
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	88 85       	ldd	r24, Y+8	; 0x08
 1dc:	99 85       	ldd	r25, Y+9	; 0x09
 1de:	13 d0       	rcall	.+38     	; 0x206 <__fixunssfsi>
 1e0:	dc 01       	movw	r26, r24
 1e2:	cb 01       	movw	r24, r22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e4:	9b 87       	std	Y+11, r25	; 0x0b
 1e6:	8a 87       	std	Y+10, r24	; 0x0a
 1e8:	8a 85       	ldd	r24, Y+10	; 0x0a
 1ea:	9b 85       	ldd	r25, Y+11	; 0x0b
 1ec:	9f 87       	std	Y+15, r25	; 0x0f
 1ee:	8e 87       	std	Y+14, r24	; 0x0e
 1f0:	8e 85       	ldd	r24, Y+14	; 0x0e
 1f2:	9f 85       	ldd	r25, Y+15	; 0x0f
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0xf0>
 1f8:	9f 87       	std	Y+15, r25	; 0x0f
 1fa:	8e 87       	std	Y+14, r24	; 0x0e
 1fc:	91 cf       	rjmp	.-222    	; 0x120 <main+0x1c>

000001fe <__cmpsf2>:
 1fe:	2f d0       	rcall	.+94     	; 0x25e <__fp_cmp>
 200:	08 f4       	brcc	.+2      	; 0x204 <__cmpsf2+0x6>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <__fixunssfsi>:
 206:	57 d0       	rcall	.+174    	; 0x2b6 <__fp_splitA>
 208:	88 f0       	brcs	.+34     	; 0x22c <__fixunssfsi+0x26>
 20a:	9f 57       	subi	r25, 0x7F	; 127
		_delay_ms(5000);

	}
 20c:	90 f0       	brcs	.+36     	; 0x232 <__fixunssfsi+0x2c>
 20e:	b9 2f       	mov	r27, r25
 210:	99 27       	eor	r25, r25
 212:	b7 51       	subi	r27, 0x17	; 23
 214:	a0 f0       	brcs	.+40     	; 0x23e <__fixunssfsi+0x38>
 216:	d1 f0       	breq	.+52     	; 0x24c <__fixunssfsi+0x46>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	1a f0       	brmi	.+6      	; 0x228 <__fixunssfsi+0x22>
 222:	ba 95       	dec	r27
 224:	c9 f7       	brne	.-14     	; 0x218 <__fixunssfsi+0x12>
 226:	12 c0       	rjmp	.+36     	; 0x24c <__fixunssfsi+0x46>
 228:	b1 30       	cpi	r27, 0x01	; 1
 22a:	81 f0       	breq	.+32     	; 0x24c <__fixunssfsi+0x46>
 22c:	5e d0       	rcall	.+188    	; 0x2ea <__fp_zero>
 22e:	b1 e0       	ldi	r27, 0x01	; 1
 230:	08 95       	ret
 232:	5b c0       	rjmp	.+182    	; 0x2ea <__fp_zero>
 234:	67 2f       	mov	r22, r23
 236:	78 2f       	mov	r23, r24
 238:	88 27       	eor	r24, r24
 23a:	b8 5f       	subi	r27, 0xF8	; 248
 23c:	39 f0       	breq	.+14     	; 0x24c <__fixunssfsi+0x46>
 23e:	b9 3f       	cpi	r27, 0xF9	; 249
 240:	cc f3       	brlt	.-14     	; 0x234 <__fixunssfsi+0x2e>
 242:	86 95       	lsr	r24
 244:	77 95       	ror	r23
 246:	67 95       	ror	r22
 248:	b3 95       	inc	r27
 24a:	d9 f7       	brne	.-10     	; 0x242 <__fixunssfsi+0x3c>
 24c:	3e f4       	brtc	.+14     	; 0x25c <__fixunssfsi+0x56>
 24e:	90 95       	com	r25
 250:	80 95       	com	r24
 252:	70 95       	com	r23
 254:	61 95       	neg	r22
 256:	7f 4f       	sbci	r23, 0xFF	; 255
 258:	8f 4f       	sbci	r24, 0xFF	; 255
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	08 95       	ret

0000025e <__fp_cmp>:
 25e:	99 0f       	add	r25, r25
 260:	00 08       	sbc	r0, r0
 262:	55 0f       	add	r21, r21
 264:	aa 0b       	sbc	r26, r26
 266:	e0 e8       	ldi	r30, 0x80	; 128
 268:	fe ef       	ldi	r31, 0xFE	; 254
 26a:	16 16       	cp	r1, r22
 26c:	17 06       	cpc	r1, r23
 26e:	e8 07       	cpc	r30, r24
 270:	f9 07       	cpc	r31, r25
 272:	c0 f0       	brcs	.+48     	; 0x2a4 <__fp_cmp+0x46>
 274:	12 16       	cp	r1, r18
 276:	13 06       	cpc	r1, r19
 278:	e4 07       	cpc	r30, r20
 27a:	f5 07       	cpc	r31, r21
 27c:	98 f0       	brcs	.+38     	; 0x2a4 <__fp_cmp+0x46>
 27e:	62 1b       	sub	r22, r18
 280:	73 0b       	sbc	r23, r19
 282:	84 0b       	sbc	r24, r20
 284:	95 0b       	sbc	r25, r21
 286:	39 f4       	brne	.+14     	; 0x296 <__fp_cmp+0x38>
 288:	0a 26       	eor	r0, r26
 28a:	61 f0       	breq	.+24     	; 0x2a4 <__fp_cmp+0x46>
 28c:	23 2b       	or	r18, r19
 28e:	24 2b       	or	r18, r20
 290:	25 2b       	or	r18, r21
 292:	21 f4       	brne	.+8      	; 0x29c <__fp_cmp+0x3e>
 294:	08 95       	ret
 296:	0a 26       	eor	r0, r26
 298:	09 f4       	brne	.+2      	; 0x29c <__fp_cmp+0x3e>
 29a:	a1 40       	sbci	r26, 0x01	; 1
 29c:	a6 95       	lsr	r26
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	81 1d       	adc	r24, r1
 2a2:	81 1d       	adc	r24, r1
 2a4:	08 95       	ret

000002a6 <__fp_split3>:
 2a6:	57 fd       	sbrc	r21, 7
 2a8:	90 58       	subi	r25, 0x80	; 128
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	59 f0       	breq	.+22     	; 0x2c6 <__fp_splitA+0x10>
 2b0:	5f 3f       	cpi	r21, 0xFF	; 255
 2b2:	71 f0       	breq	.+28     	; 0x2d0 <__fp_splitA+0x1a>
 2b4:	47 95       	ror	r20

000002b6 <__fp_splitA>:
 2b6:	88 0f       	add	r24, r24
 2b8:	97 fb       	bst	r25, 7
 2ba:	99 1f       	adc	r25, r25
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <__fp_splitA+0x20>
 2be:	9f 3f       	cpi	r25, 0xFF	; 255
 2c0:	79 f0       	breq	.+30     	; 0x2e0 <__fp_splitA+0x2a>
 2c2:	87 95       	ror	r24
 2c4:	08 95       	ret
 2c6:	12 16       	cp	r1, r18
 2c8:	13 06       	cpc	r1, r19
 2ca:	14 06       	cpc	r1, r20
 2cc:	55 1f       	adc	r21, r21
 2ce:	f2 cf       	rjmp	.-28     	; 0x2b4 <__fp_split3+0xe>
 2d0:	46 95       	lsr	r20
 2d2:	f1 df       	rcall	.-30     	; 0x2b6 <__fp_splitA>
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <__fp_splitA+0x30>
 2d6:	16 16       	cp	r1, r22
 2d8:	17 06       	cpc	r1, r23
 2da:	18 06       	cpc	r1, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	f1 cf       	rjmp	.-30     	; 0x2c2 <__fp_splitA+0xc>
 2e0:	86 95       	lsr	r24
 2e2:	71 05       	cpc	r23, r1
 2e4:	61 05       	cpc	r22, r1
 2e6:	08 94       	sec
 2e8:	08 95       	ret

000002ea <__fp_zero>:
 2ea:	e8 94       	clt

000002ec <__fp_szero>:
 2ec:	bb 27       	eor	r27, r27
 2ee:	66 27       	eor	r22, r22
 2f0:	77 27       	eor	r23, r23
 2f2:	cb 01       	movw	r24, r22
 2f4:	97 f9       	bld	r25, 7
 2f6:	08 95       	ret

000002f8 <__gesf2>:
 2f8:	b2 df       	rcall	.-156    	; 0x25e <__fp_cmp>
 2fa:	08 f4       	brcc	.+2      	; 0x2fe <__gesf2+0x6>
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	08 95       	ret

00000300 <__mulsf3>:
 300:	0b d0       	rcall	.+22     	; 0x318 <__mulsf3x>
 302:	78 c0       	rjmp	.+240    	; 0x3f4 <__fp_round>
 304:	69 d0       	rcall	.+210    	; 0x3d8 <__fp_pscA>
 306:	28 f0       	brcs	.+10     	; 0x312 <__mulsf3+0x12>
 308:	6e d0       	rcall	.+220    	; 0x3e6 <__fp_pscB>
 30a:	18 f0       	brcs	.+6      	; 0x312 <__mulsf3+0x12>
 30c:	95 23       	and	r25, r21
 30e:	09 f0       	breq	.+2      	; 0x312 <__mulsf3+0x12>
 310:	5a c0       	rjmp	.+180    	; 0x3c6 <__fp_inf>
 312:	5f c0       	rjmp	.+190    	; 0x3d2 <__fp_nan>
 314:	11 24       	eor	r1, r1
 316:	ea cf       	rjmp	.-44     	; 0x2ec <__fp_szero>

00000318 <__mulsf3x>:
 318:	c6 df       	rcall	.-116    	; 0x2a6 <__fp_split3>
 31a:	a0 f3       	brcs	.-24     	; 0x304 <__mulsf3+0x4>

0000031c <__mulsf3_pse>:
 31c:	95 9f       	mul	r25, r21
 31e:	d1 f3       	breq	.-12     	; 0x314 <__mulsf3+0x14>
 320:	95 0f       	add	r25, r21
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	55 1f       	adc	r21, r21
 326:	62 9f       	mul	r22, r18
 328:	f0 01       	movw	r30, r0
 32a:	72 9f       	mul	r23, r18
 32c:	bb 27       	eor	r27, r27
 32e:	f0 0d       	add	r31, r0
 330:	b1 1d       	adc	r27, r1
 332:	63 9f       	mul	r22, r19
 334:	aa 27       	eor	r26, r26
 336:	f0 0d       	add	r31, r0
 338:	b1 1d       	adc	r27, r1
 33a:	aa 1f       	adc	r26, r26
 33c:	64 9f       	mul	r22, r20
 33e:	66 27       	eor	r22, r22
 340:	b0 0d       	add	r27, r0
 342:	a1 1d       	adc	r26, r1
 344:	66 1f       	adc	r22, r22
 346:	82 9f       	mul	r24, r18
 348:	22 27       	eor	r18, r18
 34a:	b0 0d       	add	r27, r0
 34c:	a1 1d       	adc	r26, r1
 34e:	62 1f       	adc	r22, r18
 350:	73 9f       	mul	r23, r19
 352:	b0 0d       	add	r27, r0
 354:	a1 1d       	adc	r26, r1
 356:	62 1f       	adc	r22, r18
 358:	83 9f       	mul	r24, r19
 35a:	a0 0d       	add	r26, r0
 35c:	61 1d       	adc	r22, r1
 35e:	22 1f       	adc	r18, r18
 360:	74 9f       	mul	r23, r20
 362:	33 27       	eor	r19, r19
 364:	a0 0d       	add	r26, r0
 366:	61 1d       	adc	r22, r1
 368:	23 1f       	adc	r18, r19
 36a:	84 9f       	mul	r24, r20
 36c:	60 0d       	add	r22, r0
 36e:	21 1d       	adc	r18, r1
 370:	82 2f       	mov	r24, r18
 372:	76 2f       	mov	r23, r22
 374:	6a 2f       	mov	r22, r26
 376:	11 24       	eor	r1, r1
 378:	9f 57       	subi	r25, 0x7F	; 127
 37a:	50 40       	sbci	r21, 0x00	; 0
 37c:	8a f0       	brmi	.+34     	; 0x3a0 <__mulsf3_pse+0x84>
 37e:	e1 f0       	breq	.+56     	; 0x3b8 <__mulsf3_pse+0x9c>
 380:	88 23       	and	r24, r24
 382:	4a f0       	brmi	.+18     	; 0x396 <__mulsf3_pse+0x7a>
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	bb 1f       	adc	r27, r27
 38a:	66 1f       	adc	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	88 1f       	adc	r24, r24
 390:	91 50       	subi	r25, 0x01	; 1
 392:	50 40       	sbci	r21, 0x00	; 0
 394:	a9 f7       	brne	.-22     	; 0x380 <__mulsf3_pse+0x64>
 396:	9e 3f       	cpi	r25, 0xFE	; 254
 398:	51 05       	cpc	r21, r1
 39a:	70 f0       	brcs	.+28     	; 0x3b8 <__mulsf3_pse+0x9c>
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <__fp_inf>
 39e:	a6 cf       	rjmp	.-180    	; 0x2ec <__fp_szero>
 3a0:	5f 3f       	cpi	r21, 0xFF	; 255
 3a2:	ec f3       	brlt	.-6      	; 0x39e <__mulsf3_pse+0x82>
 3a4:	98 3e       	cpi	r25, 0xE8	; 232
 3a6:	dc f3       	brlt	.-10     	; 0x39e <__mulsf3_pse+0x82>
 3a8:	86 95       	lsr	r24
 3aa:	77 95       	ror	r23
 3ac:	67 95       	ror	r22
 3ae:	b7 95       	ror	r27
 3b0:	f7 95       	ror	r31
 3b2:	e7 95       	ror	r30
 3b4:	9f 5f       	subi	r25, 0xFF	; 255
 3b6:	c1 f7       	brne	.-16     	; 0x3a8 <__mulsf3_pse+0x8c>
 3b8:	fe 2b       	or	r31, r30
 3ba:	88 0f       	add	r24, r24
 3bc:	91 1d       	adc	r25, r1
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	97 f9       	bld	r25, 7
 3c4:	08 95       	ret

000003c6 <__fp_inf>:
 3c6:	97 f9       	bld	r25, 7
 3c8:	9f 67       	ori	r25, 0x7F	; 127
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	08 95       	ret

000003d2 <__fp_nan>:
 3d2:	9f ef       	ldi	r25, 0xFF	; 255
 3d4:	80 ec       	ldi	r24, 0xC0	; 192
 3d6:	08 95       	ret

000003d8 <__fp_pscA>:
 3d8:	00 24       	eor	r0, r0
 3da:	0a 94       	dec	r0
 3dc:	16 16       	cp	r1, r22
 3de:	17 06       	cpc	r1, r23
 3e0:	18 06       	cpc	r1, r24
 3e2:	09 06       	cpc	r0, r25
 3e4:	08 95       	ret

000003e6 <__fp_pscB>:
 3e6:	00 24       	eor	r0, r0
 3e8:	0a 94       	dec	r0
 3ea:	12 16       	cp	r1, r18
 3ec:	13 06       	cpc	r1, r19
 3ee:	14 06       	cpc	r1, r20
 3f0:	05 06       	cpc	r0, r21
 3f2:	08 95       	ret

000003f4 <__fp_round>:
 3f4:	09 2e       	mov	r0, r25
 3f6:	03 94       	inc	r0
 3f8:	00 0c       	add	r0, r0
 3fa:	11 f4       	brne	.+4      	; 0x400 <__fp_round+0xc>
 3fc:	88 23       	and	r24, r24
 3fe:	52 f0       	brmi	.+20     	; 0x414 <__fp_round+0x20>
 400:	bb 0f       	add	r27, r27
 402:	40 f4       	brcc	.+16     	; 0x414 <__fp_round+0x20>
 404:	bf 2b       	or	r27, r31
 406:	11 f4       	brne	.+4      	; 0x40c <__fp_round+0x18>
 408:	60 ff       	sbrs	r22, 0
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__fp_round+0x20>
 40c:	6f 5f       	subi	r22, 0xFF	; 255
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8f 4f       	sbci	r24, 0xFF	; 255
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	08 95       	ret

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>

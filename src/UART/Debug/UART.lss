
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000001ec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012a  0080012a  000002aa  2**0
                  ALLOC
  3 .stab         00000930  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d75  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001951  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  9e:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
#include <UART_comms.h>

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    UBRR0H = UBRRH_VALUE;
  ae:	85 ec       	ldi	r24, 0xC5	; 197
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	10 82       	st	Z, r1
    UBRR0L = UBRRL_VALUE;
  b6:	84 ec       	ldi	r24, 0xC4	; 196
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	27 e6       	ldi	r18, 0x67	; 103
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
  c0:	80 ec       	ldi	r24, 0xC0	; 192
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	20 ec       	ldi	r18, 0xC0	; 192
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	2d 7f       	andi	r18, 0xFD	; 253
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  d2:	82 ec       	ldi	r24, 0xC2	; 194
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  dc:	81 ec       	ldi	r24, 0xC1	; 193
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	28 e1       	ldi	r18, 0x18	; 24
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <uart_putchar>:

void uart_putchar(char c, FILE *stream) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <uart_putchar+0x6>
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	7b 83       	std	Y+3, r23	; 0x03
  fc:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') {
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	8a 30       	cpi	r24, 0x0A	; 10
 102:	31 f4       	brne	.+12     	; 0x110 <uart_putchar+0x24>
        uart_putchar('\r', stream);
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	9b 81       	ldd	r25, Y+3	; 0x03
 108:	bc 01       	movw	r22, r24
 10a:	8d e0       	ldi	r24, 0x0D	; 13
 10c:	0e 94 76 00 	call	0xec	; 0xec <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
 110:	80 ec       	ldi	r24, 0xC0	; 192
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	80 72       	andi	r24, 0x20	; 32
 11e:	99 27       	eor	r25, r25
 120:	89 2b       	or	r24, r25
 122:	b1 f3       	breq	.-20     	; 0x110 <uart_putchar+0x24>
    UDR0 = c;
 124:	86 ec       	ldi	r24, 0xC6	; 198
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	29 81       	ldd	r18, Y+1	; 0x01
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
}
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <uart_getchar>:

char uart_getchar(FILE *stream) {
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <uart_getchar+0x6>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 148:	80 ec       	ldi	r24, 0xC0	; 192
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	d4 f7       	brge	.-12     	; 0x148 <uart_getchar+0xe>
    return UDR0;
 154:	86 ec       	ldi	r24, 0xC6	; 198
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <main>:
 *																		*
 ************************************************************************/

#include <UART_comms.h>

int main(void) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62

    uart_init();
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
    stdout = &uart_output;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	90 93 2d 01 	sts	0x012D, r25
 17a:	80 93 2c 01 	sts	0x012C, r24

    while(1) {
        puts("Hello world!");
 17e:	8c e1       	ldi	r24, 0x1C	; 28
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 c4 00 	call	0x188	; 0x188 <puts>
    }
 186:	fb cf       	rjmp	.-10     	; 0x17e <main+0x18>

00000188 <puts>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	e0 91 2c 01 	lds	r30, 0x012C
 194:	f0 91 2d 01 	lds	r31, 0x012D
 198:	23 81       	ldd	r18, Z+3	; 0x03
 19a:	21 ff       	sbrs	r18, 1
 19c:	1b c0       	rjmp	.+54     	; 0x1d4 <puts+0x4c>
 19e:	8c 01       	movw	r16, r24
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	f8 01       	movw	r30, r16
 1a6:	81 91       	ld	r24, Z+
 1a8:	8f 01       	movw	r16, r30
 1aa:	60 91 2c 01 	lds	r22, 0x012C
 1ae:	70 91 2d 01 	lds	r23, 0x012D
 1b2:	db 01       	movw	r26, r22
 1b4:	18 96       	adiw	r26, 0x08	; 8
 1b6:	ed 91       	ld	r30, X+
 1b8:	fc 91       	ld	r31, X
 1ba:	19 97       	sbiw	r26, 0x09	; 9
 1bc:	88 23       	and	r24, r24
 1be:	31 f0       	breq	.+12     	; 0x1cc <puts+0x44>
 1c0:	09 95       	icall
 1c2:	89 2b       	or	r24, r25
 1c4:	79 f3       	breq	.-34     	; 0x1a4 <puts+0x1c>
 1c6:	df ef       	ldi	r29, 0xFF	; 255
 1c8:	cf ef       	ldi	r28, 0xFF	; 255
 1ca:	ec cf       	rjmp	.-40     	; 0x1a4 <puts+0x1c>
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	09 95       	icall
 1d0:	89 2b       	or	r24, r25
 1d2:	19 f0       	breq	.+6      	; 0x1da <puts+0x52>
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <puts+0x56>
 1da:	8d 2f       	mov	r24, r29
 1dc:	9c 2f       	mov	r25, r28
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>


SPI_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f0  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000918  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bec  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_MasterInit>:
	/* Set up SPI Master
	 * Returns: void.
	 */

	/* Set MOSI, SCK and SS output, MISO as input */
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4

	DDR_SPI &= ~(1<<DD_MISO);
  86:	24 98       	cbi	0x04, 4	; 4

	PORTB |= (1<<DD_SS);
  88:	2a 9a       	sbi	0x05, 2	; 5

	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0)|(1<<SPR1);
  8a:	82 e5       	ldi	r24, 0x52	; 82
  8c:	8c bd       	out	0x2c, r24	; 44

	SPSR &= ~(1<<SPI2X);
  8e:	8d b5       	in	r24, 0x2d	; 45
  90:	8e 7f       	andi	r24, 0xFE	; 254
  92:	8d bd       	out	0x2d, r24	; 45
  94:	08 95       	ret

00000096 <SPI_MasterTransmit>:
	 */

	uint8_t flush_buffer; /* Buffer to flush the existent data on the SPI register */

	/* Start transmission */
	SPDR = data;
  96:	8e bd       	out	0x2e, r24	; 46

	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
  98:	0d b4       	in	r0, 0x2d	; 45
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <SPI_MasterTransmit+0x2>
void FlushShiftRegister(void) {
	/* Flushes the shift register by switching the latch
	 * Returns: void
	 */

	PORTB |= (1<<DD_SS);	/* Drive the latch to high */
  9e:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <SPI_MasterTransmit+0xc>
  a6:	00 00       	nop
	_delay_us(1);			/* Latch hold time */
	PORTB &= ~(1<<DD_SS);	/* Drive the latch to low */
  a8:	2a 98       	cbi	0x05, 2	; 5
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <SPI_MasterTransmit+0x16>
  b0:	00 00       	nop
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));

	FlushShiftRegister(); 	/* Flush the shift register to put the byte into the screen */

	flush_buffer = SPDR;	/* Flush the SPI register */
  b2:	8e b5       	in	r24, 0x2e	; 46
  b4:	08 95       	ret

000000b6 <FlushShiftRegister>:
void FlushShiftRegister(void) {
	/* Flushes the shift register by switching the latch
	 * Returns: void
	 */

	PORTB |= (1<<DD_SS);	/* Drive the latch to high */
  b6:	2a 9a       	sbi	0x05, 2	; 5
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <FlushShiftRegister+0x4>
  be:	00 00       	nop
	_delay_us(1);			/* Latch hold time */
	PORTB &= ~(1<<DD_SS);	/* Drive the latch to low */
  c0:	2a 98       	cbi	0x05, 2	; 5
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <FlushShiftRegister+0xe>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <main>:
 */

#include "SPI_comms.h"
uint8_t main(void){

	SPI_MasterInit();
  cc:	0e 94 40 00 	call	0x80	; 0x80 <SPI_MasterInit>
	uint8_t data = 0xF0;
	SPI_MasterTransmit(data);
  d0:	80 ef       	ldi	r24, 0xF0	; 240
  d2:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_MasterTransmit>
	data = 0x2A;
	SPI_MasterTransmit(data);
  d6:	8a e2       	ldi	r24, 0x2A	; 42
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_MasterTransmit>
	data = 0xFF;
	SPI_MasterTransmit(data);
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_MasterTransmit>
	uint8_t aaa = 'A';
	SPI_MasterTransmit(aaa);
  e2:	81 e4       	ldi	r24, 0x41	; 65
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_MasterTransmit>

	return 0;
}
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>


I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005c0  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001c74  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dd4  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00003c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00003c83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  78:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <reverse_nibble>:
#include "i2cmaster.h"
#include "LCD.h"



uint8_t reverse_nibble(uint8_t nibble) {
  80:	28 2f       	mov	r18, r24
  82:	30 e0       	ldi	r19, 0x00	; 0

		uint8_t NO_OF_BITS = sizeof(nibble)*8;
		uint8_t rev_nibble = 0;

		for (int i = 0; i < NO_OF_BITS; i++) {
			if((nibble & (1 << i)))
  84:	80 ff       	sbrs	r24, 0
  86:	15 c0       	rjmp	.+42     	; 0xb2 <reverse_nibble+0x32>
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  88:	80 e8       	ldi	r24, 0x80	; 128
			if((nibble & (1 << i)))
  8a:	21 fd       	sbrc	r18, 1
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  8c:	80 64       	ori	r24, 0x40	; 64
			if((nibble & (1 << i)))
  8e:	22 fd       	sbrc	r18, 2
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  90:	80 62       	ori	r24, 0x20	; 32
			if((nibble & (1 << i)))
  92:	23 fd       	sbrc	r18, 3
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  94:	80 61       	ori	r24, 0x10	; 16
			if((nibble & (1 << i)))
  96:	24 fd       	sbrc	r18, 4
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  98:	88 60       	ori	r24, 0x08	; 8
			if((nibble & (1 << i)))
  9a:	25 fd       	sbrc	r18, 5
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  9c:	84 60       	ori	r24, 0x04	; 4
			if((nibble & (1 << i)))
  9e:	26 fd       	sbrc	r18, 6
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  a0:	82 60       	ori	r24, 0x02	; 2
			if((nibble & (1 << i)))
  a2:	22 0f       	add	r18, r18
  a4:	23 2f       	mov	r18, r19
  a6:	22 1f       	adc	r18, r18
  a8:	33 0b       	sbc	r19, r19
  aa:	23 2b       	or	r18, r19
  ac:	09 f0       	breq	.+2      	; 0xb0 <reverse_nibble+0x30>
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
  ae:	81 60       	ori	r24, 0x01	; 1
		}

		return rev_nibble;
	}
  b0:	08 95       	ret
		uint8_t rev_nibble = 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	ea cf       	rjmp	.-44     	; 0x8a <reverse_nibble+0xa>

000000b6 <screen_init>:
	uint8_t command;

	command = 0x18;
	command |= (1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  b6:	8c e1       	ldi	r24, 0x1C	; 28
  b8:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	command &= ~(1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	89 e0       	ldi	r24, 0x09	; 9
  c4:	98 e2       	ldi	r25, 0x28	; 40
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <screen_init+0x10>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <screen_init+0x16>
  cc:	00 00       	nop
	_delay_ms(41);
	command = 0x18;
	command |= (1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  ce:	8c e1       	ldi	r24, 0x1C	; 28
  d0:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	command &= ~(1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <screen_init+0x28>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <screen_init+0x2e>
  e4:	00 00       	nop
	_delay_ms(1);
	command = 0x18;
	command |= (1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  e6:	8c e1       	ldi	r24, 0x1C	; 28
  e8:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	command &= ~(1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <screen_init+0x40>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <screen_init+0x46>
  fc:	00 00       	nop
	_delay_ms(1);
	command = 0x10;
	command |= (1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
  fe:	84 e1       	ldi	r24, 0x14	; 20
 100:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	command &= ~(1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <screen_init+0x58>
 112:	00 c0       	rjmp	.+0      	; 0x114 <screen_init+0x5e>
 114:	00 00       	nop
	/* Function Set */

	command = 0x10;
		command |= (1<<EN);
		command &= ~(1<<RS);
		i2c_write(command);
 116:	84 e1       	ldi	r24, 0x14	; 20
 118:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
		command &= ~(1<<EN);
		command &= ~(1<<RS);
		i2c_write(command);
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <screen_init+0x70>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <screen_init+0x76>
 12c:	00 00       	nop
		_delay_ms(10);

		command = 0x18;
			command |= (1<<EN);
			command &= ~(1<<RS);
			i2c_write(command);
 12e:	8c e1       	ldi	r24, 0x1C	; 28
 130:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
			command &= ~(1<<EN);
			command &= ~(1<<RS);
			i2c_write(command);
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 13a:	83 ec       	ldi	r24, 0xC3	; 195
 13c:	99 e0       	ldi	r25, 0x09	; 9
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <screen_init+0x88>
 142:	00 c0       	rjmp	.+0      	; 0x144 <screen_init+0x8e>
 144:	00 00       	nop


			command = 0x00;
				command |= (1<<EN);
				command &= ~(1<<RS);
				i2c_write(command);
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
				command &= ~(1<<EN);
				command &= ~(1<<RS);
				i2c_write(command);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 152:	83 ec       	ldi	r24, 0xC3	; 195
 154:	99 e0       	ldi	r25, 0x09	; 9
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <screen_init+0xa0>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <screen_init+0xa6>
 15c:	00 00       	nop
				_delay_ms(10);

				command = 0x80;
					command |= (1<<EN);
					command &= ~(1<<RS);
					i2c_write(command);
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
					command &= ~(1<<EN);
					command &= ~(1<<RS);
					i2c_write(command);
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 16a:	83 ec       	ldi	r24, 0xC3	; 195
 16c:	99 e0       	ldi	r25, 0x09	; 9
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <screen_init+0xb8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <screen_init+0xbe>
 174:	00 00       	nop
					_delay_ms(10);

					command = 0x00;
						command |= (1<<EN);
						command &= ~(1<<RS);
						i2c_write(command);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
						command &= ~(1<<EN);
						command &= ~(1<<RS);
						i2c_write(command);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 182:	83 ec       	ldi	r24, 0xC3	; 195
 184:	99 e0       	ldi	r25, 0x09	; 9
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <screen_init+0xd0>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <screen_init+0xd6>
 18c:	00 00       	nop
						_delay_ms(10);

						command = 0x01;
							command |= (1<<EN);
							command &= ~(1<<RS);
							i2c_write(command);
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
							command &= ~(1<<EN);
							command &= ~(1<<RS);
							i2c_write(command);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 19a:	83 ec       	ldi	r24, 0xC3	; 195
 19c:	99 e0       	ldi	r25, 0x09	; 9
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <screen_init+0xe8>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <screen_init+0xee>
 1a4:	00 00       	nop
							_delay_ms(10);

							command = 0x00;
								command |= (1<<EN);
								command &= ~(1<<RS);
								i2c_write(command);
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
								command &= ~(1<<EN);
								command &= ~(1<<RS);
								i2c_write(command);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 1b2:	83 ec       	ldi	r24, 0xC3	; 195
 1b4:	99 e0       	ldi	r25, 0x09	; 9
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <screen_init+0x100>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <screen_init+0x106>
 1bc:	00 00       	nop
								_delay_ms(10);

								command = 0x31;
																command |= (1<<EN);
																command &= ~(1<<RS);
																i2c_write(command);
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
																command &= ~(1<<EN);
																command &= ~(1<<RS);
																i2c_write(command);
 1c4:	81 e3       	ldi	r24, 0x31	; 49
 1c6:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 1ca:	83 ec       	ldi	r24, 0xC3	; 195
 1cc:	99 e0       	ldi	r25, 0x09	; 9
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <screen_init+0x118>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <screen_init+0x11e>
 1d4:	00 00       	nop
																_delay_ms(10);
}
 1d6:	08 95       	ret

000001d8 <screen_instruction>:



void screen_instruction(uint8_t instruction) {
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	uint8_t high_nibble = (instruction)&0xF0;
	uint8_t low_nibble  = (instruction)&0x0F;
 1dc:	48 2f       	mov	r20, r24
 1de:	4f 70       	andi	r20, 0x0F	; 15
	uint8_t high_nibble = (instruction)&0xF0;
 1e0:	28 2f       	mov	r18, r24
 1e2:	20 7f       	andi	r18, 0xF0	; 240
			if((nibble & (1 << i)))
 1e4:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t rev_nibble = 0;
 1e6:	90 e0       	ldi	r25, 0x00	; 0
			if((nibble & (1 << i)))
 1e8:	24 fd       	sbrc	r18, 4
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 1ea:	98 60       	ori	r25, 0x08	; 8
			if((nibble & (1 << i)))
 1ec:	25 fd       	sbrc	r18, 5
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 1ee:	94 60       	ori	r25, 0x04	; 4
			if((nibble & (1 << i)))
 1f0:	26 fd       	sbrc	r18, 6
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 1f2:	92 60       	ori	r25, 0x02	; 2
			if((nibble & (1 << i)))
 1f4:	22 0f       	add	r18, r18
 1f6:	23 2f       	mov	r18, r19
 1f8:	22 1f       	adc	r18, r18
 1fa:	33 0b       	sbc	r19, r19
 1fc:	23 2b       	or	r18, r19
 1fe:	09 f0       	breq	.+2      	; 0x202 <screen_instruction+0x2a>
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 200:	91 60       	ori	r25, 0x01	; 1

	high_nibble = reverse_nibble(high_nibble)<<4;
 202:	92 95       	swap	r25
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	24 2f       	mov	r18, r20
 208:	30 e0       	ldi	r19, 0x00	; 0
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 20a:	d0 e8       	ldi	r29, 0x80	; 128
			if((nibble & (1 << i)))
 20c:	80 ff       	sbrs	r24, 0
		uint8_t rev_nibble = 0;
 20e:	d0 e0       	ldi	r29, 0x00	; 0
			if((nibble & (1 << i)))
 210:	21 fd       	sbrc	r18, 1
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 212:	d0 64       	ori	r29, 0x40	; 64
			if((nibble & (1 << i)))
 214:	22 fd       	sbrc	r18, 2
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 216:	d0 62       	ori	r29, 0x20	; 32
			if((nibble & (1 << i)))
 218:	35 95       	asr	r19
 21a:	27 95       	ror	r18
 21c:	35 95       	asr	r19
 21e:	27 95       	ror	r18
 220:	35 95       	asr	r19
 222:	27 95       	ror	r18
 224:	23 2b       	or	r18, r19
 226:	09 f0       	breq	.+2      	; 0x22a <screen_instruction+0x52>
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 228:	d0 61       	ori	r29, 0x10	; 16
	low_nibble 	= reverse_nibble(low_nibble)>>4;

	/* High nibble */

	uint8_t send_instruction;
	send_instruction = high_nibble>>1;
 22a:	c9 2f       	mov	r28, r25
 22c:	c6 95       	lsr	r28
	send_instruction |= (1<<EN);
	send_instruction &= ~(1<<RS);

	i2c_write(send_instruction);
 22e:	8c 2f       	mov	r24, r28
 230:	84 60       	ori	r24, 0x04	; 4
 232:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>

	send_instruction &= ~(1<<EN);

	i2c_write(send_instruction);
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 23c:	83 ec       	ldi	r24, 0xC3	; 195
 23e:	99 e0       	ldi	r25, 0x09	; 9
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <screen_instruction+0x68>
 244:	00 c0       	rjmp	.+0      	; 0x246 <screen_instruction+0x6e>
 246:	00 00       	nop
	low_nibble 	= reverse_nibble(low_nibble)>>4;
 248:	d2 95       	swap	r29
 24a:	df 70       	andi	r29, 0x0F	; 15

	_delay_ms(10);

	/* Low nibble */

	send_instruction = low_nibble<<3;
 24c:	dd 0f       	add	r29, r29
 24e:	dd 0f       	add	r29, r29
 250:	dd 0f       	add	r29, r29
	send_instruction |= (1<<EN);
	send_instruction &= ~(1<<RS);

	i2c_write(send_instruction);
 252:	8d 2f       	mov	r24, r29
 254:	84 60       	ori	r24, 0x04	; 4
 256:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>

	send_instruction &= ~(1<<EN);
	send_instruction |= (1<<BKL);

	i2c_write(send_instruction);
 25a:	8d 2f       	mov	r24, r29
 25c:	80 68       	ori	r24, 0x80	; 128
 25e:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 262:	83 ec       	ldi	r24, 0xC3	; 195
 264:	99 e0       	ldi	r25, 0x09	; 9
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <screen_instruction+0x8e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <screen_instruction+0x94>
 26c:	00 00       	nop

	_delay_ms(10);
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <screen_data>:


void screen_data(uint8_t data) {
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	c8 2f       	mov	r28, r24
	uint8_t low_nibble  = (data)&0x0F;

	/* High nibble */

	uint8_t send_data;
	send_data = high_nibble>>1;
 27a:	d8 2f       	mov	r29, r24
 27c:	d6 95       	lsr	r29
 27e:	d8 77       	andi	r29, 0x78	; 120
	send_data |= (1<<RS)|(1<<EN)|(1<<BKL);

	i2c_write(send_data);
 280:	8d 2f       	mov	r24, r29
 282:	86 68       	ori	r24, 0x86	; 134
 284:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>

	send_data &= ~(1<<EN);

	i2c_write(send_data);
 288:	8d 2f       	mov	r24, r29
 28a:	82 68       	ori	r24, 0x82	; 130
 28c:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 290:	83 ec       	ldi	r24, 0xC3	; 195
 292:	99 e0       	ldi	r25, 0x09	; 9
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <screen_data+0x20>
 298:	00 c0       	rjmp	.+0      	; 0x29a <screen_data+0x26>
 29a:	00 00       	nop

	_delay_ms(10);

	/* Low nibble */

	send_data = low_nibble<<3;
 29c:	cc 0f       	add	r28, r28
 29e:	cc 0f       	add	r28, r28
 2a0:	cc 0f       	add	r28, r28
 2a2:	c8 77       	andi	r28, 0x78	; 120
	send_data |= (1<<RS)|(1<<EN)|(1<<BKL);

	i2c_write(send_data);
 2a4:	8c 2f       	mov	r24, r28
 2a6:	86 68       	ori	r24, 0x86	; 134
 2a8:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>

	send_data &= ~(1<<EN);

	i2c_write(send_data);
 2ac:	8c 2f       	mov	r24, r28
 2ae:	82 68       	ori	r24, 0x82	; 130
 2b0:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 2b4:	83 ec       	ldi	r24, 0xC3	; 195
 2b6:	99 e0       	ldi	r25, 0x09	; 9
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <screen_data+0x44>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <screen_data+0x4a>
 2be:	00 00       	nop

	_delay_ms(10);

}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <put_char>:

void put_char(uint8_t character){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	uint8_t high_nibble = (character)&0xF0;
	uint8_t low_nibble = (character)&0x0F;
 2ca:	98 2f       	mov	r25, r24
 2cc:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t high_nibble = (character)&0xF0;
 2ce:	28 2f       	mov	r18, r24
 2d0:	20 7f       	andi	r18, 0xF0	; 240
			if((nibble & (1 << i)))
 2d2:	30 e0       	ldi	r19, 0x00	; 0
		uint8_t rev_nibble = 0;
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
			if((nibble & (1 << i)))
 2d6:	24 fd       	sbrc	r18, 4
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 2d8:	c8 60       	ori	r28, 0x08	; 8
			if((nibble & (1 << i)))
 2da:	25 fd       	sbrc	r18, 5
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 2dc:	c4 60       	ori	r28, 0x04	; 4
			if((nibble & (1 << i)))
 2de:	26 fd       	sbrc	r18, 6
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 2e0:	c2 60       	ori	r28, 0x02	; 2
			if((nibble & (1 << i)))
 2e2:	22 0f       	add	r18, r18
 2e4:	23 2f       	mov	r18, r19
 2e6:	22 1f       	adc	r18, r18
 2e8:	33 0b       	sbc	r19, r19
 2ea:	23 2b       	or	r18, r19
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <put_char+0x2a>
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 2ee:	c1 60       	ori	r28, 0x01	; 1
 2f0:	29 2f       	mov	r18, r25
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	90 e8       	ldi	r25, 0x80	; 128
			if((nibble & (1 << i)))
 2f6:	80 ff       	sbrs	r24, 0
		uint8_t rev_nibble = 0;
 2f8:	90 e0       	ldi	r25, 0x00	; 0
			if((nibble & (1 << i)))
 2fa:	21 fd       	sbrc	r18, 1
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 2fc:	90 64       	ori	r25, 0x40	; 64
			if((nibble & (1 << i)))
 2fe:	22 fd       	sbrc	r18, 2
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 300:	90 62       	ori	r25, 0x20	; 32
			if((nibble & (1 << i)))
 302:	35 95       	asr	r19
 304:	27 95       	ror	r18
 306:	35 95       	asr	r19
 308:	27 95       	ror	r18
 30a:	35 95       	asr	r19
 30c:	27 95       	ror	r18
 30e:	23 2b       	or	r18, r19
 310:	09 f0       	breq	.+2      	; 0x314 <put_char+0x4e>
			   rev_nibble |= 1 << ((NO_OF_BITS - 1) - i);
 312:	90 61       	ori	r25, 0x10	; 16

	high_nibble = reverse_nibble(high_nibble);
	low_nibble = reverse_nibble(low_nibble);

	character = (high_nibble<<4)|(low_nibble>>4);
 314:	80 e1       	ldi	r24, 0x10	; 16
 316:	c8 9f       	mul	r28, r24
 318:	e0 01       	movw	r28, r0
 31a:	11 24       	eor	r1, r1
 31c:	92 95       	swap	r25
 31e:	9f 70       	andi	r25, 0x0F	; 15
 320:	c9 2b       	or	r28, r25
	send_data = high_nibble>>1;
 322:	dc 2f       	mov	r29, r28
 324:	d6 95       	lsr	r29
 326:	d8 77       	andi	r29, 0x78	; 120
	i2c_write(send_data);
 328:	8d 2f       	mov	r24, r29
 32a:	86 68       	ori	r24, 0x86	; 134
 32c:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	i2c_write(send_data);
 330:	8d 2f       	mov	r24, r29
 332:	82 68       	ori	r24, 0x82	; 130
 334:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 338:	83 ec       	ldi	r24, 0xC3	; 195
 33a:	99 e0       	ldi	r25, 0x09	; 9
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <put_char+0x76>
 340:	00 c0       	rjmp	.+0      	; 0x342 <put_char+0x7c>
 342:	00 00       	nop
	send_data = low_nibble<<3;
 344:	cc 0f       	add	r28, r28
 346:	cc 0f       	add	r28, r28
 348:	cc 0f       	add	r28, r28
 34a:	c8 77       	andi	r28, 0x78	; 120
	i2c_write(send_data);
 34c:	8c 2f       	mov	r24, r28
 34e:	86 68       	ori	r24, 0x86	; 134
 350:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	i2c_write(send_data);
 354:	8c 2f       	mov	r24, r28
 356:	82 68       	ori	r24, 0x82	; 130
 358:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 35c:	83 ec       	ldi	r24, 0xC3	; 195
 35e:	99 e0       	ldi	r25, 0x09	; 9
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <put_char+0x9a>
 364:	00 c0       	rjmp	.+0      	; 0x366 <put_char+0xa0>
 366:	00 00       	nop

	screen_data(character);
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <put_string>:


void put_string(uint8_t string[], uint16_t length) {
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	77 27       	eor	r23, r23
	uint8_t NO_OF_CHARS = length / sizeof(uint8_t);

	for (int i = 0; i < NO_OF_CHARS; i++) {
 378:	61 15       	cp	r22, r1
 37a:	71 05       	cpc	r23, r1
 37c:	51 f0       	breq	.+20     	; 0x392 <put_string+0x24>
 37e:	ec 01       	movw	r28, r24
 380:	8c 01       	movw	r16, r24
 382:	06 0f       	add	r16, r22
 384:	17 1f       	adc	r17, r23
		uint8_t character = string[i];
		put_char(character);
 386:	89 91       	ld	r24, Y+
 388:	0e 94 63 01 	call	0x2c6	; 0x2c6 <put_char>
	for (int i = 0; i < NO_OF_CHARS; i++) {
 38c:	0c 17       	cp	r16, r28
 38e:	1d 07       	cpc	r17, r29
 390:	d1 f7       	brne	.-12     	; 0x386 <put_string+0x18>
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <main>:
#define Dev24C02  0x40

// CLK -> A5
int main(){

	i2c_init();                                // init I2C interface();
 39c:	0e 94 3b 02 	call	0x476	; 0x476 <i2c_init>
 3a0:	89 ef       	ldi	r24, 0xF9	; 249
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <main+0x8>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0xe>
 3aa:	00 00       	nop

	_delay_ms(1);

	// COnfigures all  the pins as outputs
	i2c_start(0x40);
 3ac:	80 e4       	ldi	r24, 0x40	; 64
 3ae:	0e 94 41 02 	call	0x482	; 0x482 <i2c_start>
 3b2:	89 ef       	ldi	r24, 0xF9	; 249
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x1a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0x20>
 3bc:	00 00       	nop
	_delay_ms(1);
	i2c_write(0x00); // register addr
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 3c4:	89 ef       	ldi	r24, 0xF9	; 249
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x2c>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x32>
 3ce:	00 00       	nop
	_delay_ms(1);
	i2c_write(0x00); // clear all bits
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	i2c_stop();
 3d6:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_stop>
 3da:	87 ea       	ldi	r24, 0xA7	; 167
 3dc:	91 e6       	ldi	r25, 0x61	; 97
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <main+0x42>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x48>
 3e4:	00 00       	nop
	_delay_ms(100);

	// set up internal register for continuous write to address

	i2c_start(0x40);
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	0e 94 41 02 	call	0x482	; 0x482 <i2c_start>
 3ec:	87 ea       	ldi	r24, 0xA7	; 167
 3ee:	91 e6       	ldi	r25, 0x61	; 97
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <main+0x54>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x5a>
 3f6:	00 00       	nop
	_delay_ms(100);
	i2c_write(0x05);
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 3fe:	83 ec       	ldi	r24, 0xC3	; 195
 400:	99 e0       	ldi	r25, 0x09	; 9
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	_delay_ms(10);
	i2c_write(0x20);
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	i2c_stop();
 410:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_stop>

	i2c_start(0x40);
 414:	80 e4       	ldi	r24, 0x40	; 64
 416:	0e 94 41 02 	call	0x482	; 0x482 <i2c_start>
 41a:	87 ea       	ldi	r24, 0xA7	; 167
 41c:	91 e6       	ldi	r25, 0x61	; 97
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 424:	00 00       	nop
	_delay_ms(100);

	i2c_write(0x09); // gpio register
 426:	89 e0       	ldi	r24, 0x09	; 9
 428:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 42c:	83 ec       	ldi	r24, 0xC3	; 195
 42e:	99 e0       	ldi	r25, 0x09	; 9
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 436:	00 00       	nop
	_delay_ms(10);


	uint8_t command;

	screen_init();
 438:	0e 94 5b 00 	call	0xb6	; 0xb6 <screen_init>


	command = 0x00;
	command |= (1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	command &= ~(1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 448:	83 ec       	ldi	r24, 0xC3	; 195
 44a:	99 e0       	ldi	r25, 0x09	; 9
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 452:	00 00       	nop
	_delay_ms(10);

	command = 0x71;
	command |= (1<<EN);
	command &= ~(1<<RS);
	i2c_write(command);
 454:	85 e7       	ldi	r24, 0x75	; 117
 456:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
	command &= ~(1<<EN);
	command &= ~(1<<RS);
	command |= (1<<BKL);
	i2c_write(command);
 45a:	81 ef       	ldi	r24, 0xF1	; 241
 45c:	0e 94 b8 02 	call	0x570	; 0x570 <i2c_write>
 460:	83 ec       	ldi	r24, 0xC3	; 195
 462:	99 e0       	ldi	r25, 0x09	; 9
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
	_delay_ms(10);

	i2c_stop();
 46c:	0e 94 b0 02 	call	0x560	; 0x560 <i2c_stop>

	return 0;
}
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 95       	ret

00000476 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */

  TWSR = 0;                         /* no prescaler */
 476:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 47a:	8d ef       	ldi	r24, 0xFD	; 253
 47c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

}/* i2c_init */
 480:	08 95       	ret

00000482 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 482:	94 ea       	ldi	r25, 0xA4	; 164
 484:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 488:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 48c:	97 ff       	sbrs	r25, 7
 48e:	fc cf       	rjmp	.-8      	; 0x488 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 490:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 494:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 496:	98 30       	cpi	r25, 0x08	; 8
 498:	11 f0       	breq	.+4      	; 0x49e <i2c_start+0x1c>
 49a:	90 31       	cpi	r25, 0x10	; 16
 49c:	91 f4       	brne	.+36     	; 0x4c2 <i2c_start+0x40>

	// send device address
	TWDR = address;
 49e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 4a2:	84 e8       	ldi	r24, 0x84	; 132
 4a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 4a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4ac:	87 ff       	sbrs	r24, 7
 4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <i2c_start+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 4b0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4b4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 4b6:	98 31       	cpi	r25, 0x18	; 24
 4b8:	31 f0       	breq	.+12     	; 0x4c6 <i2c_start+0x44>
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 34       	cpi	r25, 0x40	; 64
 4be:	19 f0       	breq	.+6      	; 0x4c6 <i2c_start+0x44>

	return 0;

}/* i2c_start */
 4c0:	08 95       	ret
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
	return 0;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
}/* i2c_start */
 4c8:	08 95       	ret

000004ca <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 4ca:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;

    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 4cc:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
    	{
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 4ce:	44 e9       	ldi	r20, 0x94	; 148
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 4d0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    	while(!(TWCR & (1<<TWINT)));
 4d4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4d8:	97 ff       	sbrs	r25, 7
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <i2c_start_wait+0xa>
    	twst = TW_STATUS & 0xF8;
 4dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4e0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 4e2:	98 30       	cpi	r25, 0x08	; 8
 4e4:	11 f0       	breq	.+4      	; 0x4ea <i2c_start_wait+0x20>
 4e6:	90 31       	cpi	r25, 0x10	; 16
 4e8:	99 f7       	brne	.-26     	; 0x4d0 <i2c_start_wait+0x6>
    	TWDR = address;
 4ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
 4ee:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    	while(!(TWCR & (1<<TWINT)));
 4f2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 4f6:	97 ff       	sbrs	r25, 7
 4f8:	fc cf       	rjmp	.-8      	; 0x4f2 <i2c_start_wait+0x28>
    	twst = TW_STATUS & 0xF8;
 4fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4fe:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) )
 500:	90 32       	cpi	r25, 0x20	; 32
 502:	19 f0       	breq	.+6      	; 0x50a <i2c_start_wait+0x40>
 504:	98 35       	cpi	r25, 0x58	; 88
 506:	09 f0       	breq	.+2      	; 0x50a <i2c_start_wait+0x40>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 508:	08 95       	ret
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 50a:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	        while(TWCR & (1<<TWSTO));
 50e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 512:	94 fd       	sbrc	r25, 4
 514:	fc cf       	rjmp	.-8      	; 0x50e <i2c_start_wait+0x44>
 516:	dc cf       	rjmp	.-72     	; 0x4d0 <i2c_start_wait+0x6>

00000518 <i2c_rep_start>:
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 518:	94 ea       	ldi	r25, 0xA4	; 164
 51a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 51e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 522:	97 ff       	sbrs	r25, 7
 524:	fc cf       	rjmp	.-8      	; 0x51e <i2c_rep_start+0x6>
	twst = TW_STATUS & 0xF8;
 526:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 52a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 52c:	98 30       	cpi	r25, 0x08	; 8
 52e:	11 f0       	breq	.+4      	; 0x534 <i2c_rep_start+0x1c>
 530:	90 31       	cpi	r25, 0x10	; 16
 532:	91 f4       	brne	.+36     	; 0x558 <i2c_rep_start+0x40>
	TWDR = address;
 534:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 538:	84 e8       	ldi	r24, 0x84	; 132
 53a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 53e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 542:	87 ff       	sbrs	r24, 7
 544:	fc cf       	rjmp	.-8      	; 0x53e <i2c_rep_start+0x26>
	twst = TW_STATUS & 0xF8;
 546:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 54a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 54c:	98 31       	cpi	r25, 0x18	; 24
 54e:	31 f0       	breq	.+12     	; 0x55c <i2c_rep_start+0x44>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 34       	cpi	r25, 0x40	; 64
 554:	19 f0       	breq	.+6      	; 0x55c <i2c_rep_start+0x44>
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 556:	08 95       	ret
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	08 95       	ret
	return 0;
 55c:	80 e0       	ldi	r24, 0x00	; 0
}/* i2c_rep_start */
 55e:	08 95       	ret

00000560 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 560:	84 e9       	ldi	r24, 0x94	; 148
 562:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 566:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 56a:	84 fd       	sbrc	r24, 4
 56c:	fc cf       	rjmp	.-8      	; 0x566 <i2c_stop+0x6>

}/* i2c_stop */
 56e:	08 95       	ret

00000570 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{
    uint8_t   twst;

	// send data to the previously addressed device
	TWDR = data;
 570:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 574:	84 e8       	ldi	r24, 0x84	; 132
 576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 57a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 57e:	87 ff       	sbrs	r24, 7
 580:	fc cf       	rjmp	.-8      	; 0x57a <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 582:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 586:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	98 32       	cpi	r25, 0x28	; 40
 58c:	09 f0       	breq	.+2      	; 0x590 <i2c_write+0x20>
	return 0;

}/* i2c_write */
 58e:	08 95       	ret
	if( twst != TW_MT_DATA_ACK) return 1;
 590:	80 e0       	ldi	r24, 0x00	; 0
}/* i2c_write */
 592:	08 95       	ret

00000594 <i2c_readAck>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 594:	84 ec       	ldi	r24, 0xC4	; 196
 596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 59a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 59e:	87 ff       	sbrs	r24, 7
 5a0:	fc cf       	rjmp	.-8      	; 0x59a <i2c_readAck+0x6>

    return TWDR;
 5a2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
 5a6:	08 95       	ret

000005a8 <i2c_readNak>:

 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 5a8:	84 e8       	ldi	r24, 0x84	; 132
 5aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 5ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 5b2:	87 ff       	sbrs	r24, 7
 5b4:	fc cf       	rjmp	.-8      	; 0x5ae <i2c_readNak+0x6>

    return TWDR;
 5b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>

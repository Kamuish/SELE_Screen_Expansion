
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000954  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bd8  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <I2C_Init>:

void I2C_Init(void){
	/* Sets up I2C communication
	 */

	 TWSR = 0;                            /* no prescaler */
  80:	10 92 b9 00 	sts	0x00B9, r1
	 TWBR = ( (F_CPU/SCL_CLOCK )-16 )/2;  /* must be > 10 for stable operation */
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 93 b8 00 	sts	0x00B8, r24
	 DDRB = (1 <<PB0);
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	84 b9       	out	0x04, r24	; 4
  8e:	08 95       	ret

00000090 <I2C_Start>:
	/* Send start action  for I2C communication and wait untils the TWINT flag is set.
	 * Also checks TWI status register for correct sending of start signal.
	 * Afterwards chooses the slave, by setting the address to twdr and clearing the TWINT flag
	 */

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA)  |  ( 1 << TWEN);
  90:	94 ea       	ldi	r25, 0xA4	; 164
  92:	90 93 bc 00 	sts	0x00BC, r25

void I2C_WaitForTwint(void) {
	/*
	 * Waits for the TWINT flag to set
	 */
	while (  ! ( TWCR  &  ( 1 << TWINT )));                                                    // waits for TWINT to set
  96:	90 91 bc 00 	lds	r25, 0x00BC
  9a:	97 ff       	sbrs	r25, 7
  9c:	fc cf       	rjmp	.-8      	; 0x96 <I2C_Start+0x6>

	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA)  |  ( 1 << TWEN);

	I2C_WaitForTwint();

	if ( (TWSR & 0xF8)  != TW_START){
  9e:	90 91 b9 00 	lds	r25, 0x00B9
  a2:	98 7f       	andi	r25, 0xF8	; 248
  a4:	98 30       	cpi	r25, 0x08	; 8
  a6:	19 f0       	breq	.+6      	; 0xae <I2C_Start+0x1e>
		/* Did not receive slave ack*/
		PORTB = (1 <<PB0);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	85 b9       	out	0x05, r24	; 5
		while(1);  /* Does not allow the program to continue*/
  ac:	ff cf       	rjmp	.-2      	; 0xac <I2C_Start+0x1c>
	}

	TWDR = addr ;
  ae:	80 93 bb 00 	sts	0x00BB, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
  b2:	84 e8       	ldi	r24, 0x84	; 132
  b4:	80 93 bc 00 	sts	0x00BC, r24

void I2C_WaitForTwint(void) {
	/*
	 * Waits for the TWINT flag to set
	 */
	while (  ! ( TWCR  &  ( 1 << TWINT )));                                                    // waits for TWINT to set
  b8:	80 91 bc 00 	lds	r24, 0x00BC
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <I2C_Start+0x28>

	TWDR = addr ;

	TWCR = (1<<TWINT) | (1<<TWEN);
	I2C_WaitForTwint();
	if ( (TWSR & 0xF8)  != TW_MT_SLA_ACK){
  c0:	80 91 b9 00 	lds	r24, 0x00B9
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	88 31       	cpi	r24, 0x18	; 24
  c8:	19 f0       	breq	.+6      	; 0xd0 <I2C_Start+0x40>
		/* Did not receive slave ack*/
		PORTB = (1 <<PB0);
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	85 b9       	out	0x05, r24	; 5
		while(1);  /* Does not allow the program to continue*/
  ce:	ff cf       	rjmp	.-2      	; 0xce <I2C_Start+0x3e>
  d0:	08 95       	ret

000000d2 <I2C_Write>:


void I2C_Write( unsigned char data_i2c){
	/* Send command and wait for the flag and ACK
	 */
	TWDR = data_i2c;
  d2:	80 93 bb 00 	sts	0x00BB, r24

	TWCR = (1<<TWINT) | (1<<TWEN);
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24

void I2C_WaitForTwint(void) {
	/*
	 * Waits for the TWINT flag to set
	 */
	while (  ! ( TWCR  &  ( 1 << TWINT )));                                                    // waits for TWINT to set
  dc:	80 91 bc 00 	lds	r24, 0x00BC
  e0:	87 ff       	sbrs	r24, 7
  e2:	fc cf       	rjmp	.-8      	; 0xdc <I2C_Write+0xa>

	TWCR = (1<<TWINT) | (1<<TWEN);

	I2C_WaitForTwint();

	uint8_t status = (TWSR & 0xF8) ;
  e4:	80 91 b9 00 	lds	r24, 0x00B9
  e8:	88 7f       	andi	r24, 0xF8	; 248
	if ( status  != TW_MT_DATA_ACK){
  ea:	88 32       	cpi	r24, 0x28	; 40
  ec:	09 f0       	breq	.+2      	; 0xf0 <I2C_Write+0x1e>
		while(1);  /* Does not allow the program to continue*/
  ee:	ff cf       	rjmp	.-2      	; 0xee <I2C_Write+0x1c>
  f0:	08 95       	ret

000000f2 <I2C_Stop>:
}

void  I2C_Stop(void){
	/* Sends I2C stop action
	 */
	TWCR =  ( 1 << TWINT ) | ( 1 << TWEN ) | (1 << TWSTO ) ;
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	80 93 bc 00 	sts	0x00BC, r24
	while(TWCR & (1<<TWSTO));                                                   // waits for TWSTO to set
  f8:	80 91 bc 00 	lds	r24, 0x00BC
  fc:	84 fd       	sbrc	r24, 4
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <I2C_Stop+0x6>
}
 100:	08 95       	ret

00000102 <I2C_WaitForTwint>:

void I2C_WaitForTwint(void) {
	/*
	 * Waits for the TWINT flag to set
	 */
	while (  ! ( TWCR  &  ( 1 << TWINT )));                                                    // waits for TWINT to set
 102:	80 91 bc 00 	lds	r24, 0x00BC
 106:	87 ff       	sbrs	r24, 7
 108:	fc cf       	rjmp	.-8      	; 0x102 <I2C_WaitForTwint>
}
 10a:	08 95       	ret

0000010c <main>:


#include "I2C_comms.h"

uint8_t main(void){
	I2C_Start(I2C_ADDR);
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Start>

	uint8_t message = 0x00;

	I2C_Write(message);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ed       	ldi	r24, 0xD3	; 211
 11c:	90 e3       	ldi	r25, 0x30	; 48
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x12>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x1c>
 128:	00 00       	nop
	_delay_ms(1000);
	I2C_Stop();
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Stop>

	return 0;

}
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>

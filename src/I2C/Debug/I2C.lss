
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000a20  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c29  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <WaitForTwint>:
 */

#include "I2C_comms.h"


void WaitForTwint(void){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Waits for the TWINT flag to set
	 */
	while (  ! ( TWCR  &  ( 1 << TWINT )));                                                    // waits for TWINT to set
  88:	00 00       	nop
  8a:	8c eb       	ldi	r24, 0xBC	; 188
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	80 81       	ld	r24, Z
  92:	88 23       	and	r24, r24
  94:	d4 f7       	brge	.-12     	; 0x8a <WaitForTwint+0xa>
}
  96:	00 00       	nop
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <i2c_start>:

uint8_t i2c_start(void){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	 * Send start action  for I2C communication and wait untils the TWINT flag is set.
	 *Also checks TWI status register for correct sending of start signal.
	 * Afterwards chooses the slave, by setting the address to twdr and clearing the TWINT flag
	 *
	 */
	TWCR = ( 1 << TWINT ) | ( 1 << TWSTA)  |  ( 1 << TWEN);
  a6:	8c eb       	ldi	r24, 0xBC	; 188
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	24 ea       	ldi	r18, 0xA4	; 164
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18

	WaitForTwint();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <WaitForTwint>

	if  (( TWSR  &  0xF8)  !=  START)														     // CHECKS TWI STATUS REGISTER
  b4:	89 eb       	ldi	r24, 0xB9	; 185
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	fc 01       	movw	r30, r24
  ba:	80 81       	ld	r24, Z
  bc:	88 2f       	mov	r24, r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	88 7f       	andi	r24, 0xF8	; 248
  c2:	99 27       	eor	r25, r25
  c4:	8d 3e       	cpi	r24, 0xED	; 237
  c6:	91 05       	cpc	r25, r1
  c8:	11 f0       	breq	.+4      	; 0xce <i2c_start+0x30>
			return -1;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	19 c0       	rjmp	.+50     	; 0x100 <i2c_start+0x62>

	TWDR = SLAVEADDR ;
  ce:	8b eb       	ldi	r24, 0xBB	; 187
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
  d8:	8c eb       	ldi	r24, 0xBC	; 188
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	24 e8       	ldi	r18, 0x84	; 132
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	WaitForTwint();
  e2:	0e 94 40 00 	call	0x80	; 0x80 <WaitForTwint>

	if ((TWSR & 0xF8) != SLAVEADDR)
  e6:	89 eb       	ldi	r24, 0xB9	; 185
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 7f       	andi	r24, 0xF8	; 248
  f4:	99 27       	eor	r25, r25
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	11 f0       	breq	.+4      	; 0xfe <i2c_start+0x60>
		return -1;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	01 c0       	rjmp	.+2      	; 0x100 <i2c_start+0x62>
	return 0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <SendData>:




uint8_t SendData(char data){
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	0f 92       	push	r0
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Send command and waits for the flag and ACK
	 */
	TWDR = data;
 112:	8b eb       	ldi	r24, 0xBB	; 187
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 11c:	8c eb       	ldi	r24, 0xBC	; 188
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	24 e8       	ldi	r18, 0x84	; 132
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	WaitForTwint();
 126:	0e 94 40 00 	call	0x80	; 0x80 <WaitForTwint>
	if  ((TWSR & 0xF8) != data)
 12a:	89 eb       	ldi	r24, 0xB9	; 185
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	88 2f       	mov	r24, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	9c 01       	movw	r18, r24
 138:	28 7f       	andi	r18, 0xF8	; 248
 13a:	33 27       	eor	r19, r19
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	11 f0       	breq	.+4      	; 0x14c <SendData+0x46>
		return -1;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	01 c0       	rjmp	.+2      	; 0x14e <SendData+0x48>
	return 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
}
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <i2c_stop>:


void  i2c_stop(void){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Sends I2C stop action
	 *
	 */

	TWCR =  ( 1 << TWINT ) | ( 1 << TWEN ) | (1 << TWSTO ) ;
 15e:	8c eb       	ldi	r24, 0xBC	; 188
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	24 e9       	ldi	r18, 0x94	; 148
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18

}
 168:	00 00       	nop
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:
 *      Author: andre
 */

#include "I2C_comms.h"

int main(){
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	0f 92       	push	r0
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62

	i2c_start();
 17a:	0e 94 4f 00 	call	0x9e	; 0x9e <i2c_start>
	char command = 0x00C;
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	89 83       	std	Y+1, r24	; 0x01

	SendData(command);
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	0e 94 83 00 	call	0x106	; 0x106 <SendData>
	i2c_stop();
 188:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_stop>

	return 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
}
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
